clc
clear all
close all

TopFolder     = fileparts(fileparts(pwd));
SimFolder     = [TopFolder '\Simulation'];
DataFolder    = [SimFolder '\Datasets'];
DataFolderPub = [pwd '\Data'];              % datasets used in publication
addpath(([SimFolder, filesep]))
df = dir(DataFolderPub);
df = df(3:end);
td = [1 2 4 6 9 12];

MF = 0; % do we want to assume that all sigma are equal when evaluating performance?
alphabeta_cell = cell(length(df),3);
for d = 3:3%length(df)
    load([DataFolder '\' df(d).name])

    base_dt = observed_cells{end-1}(1);
    sig     = observed_cells{end-1}(end-length(observed_cells)+3:end);

    [alpha,beta,betaMSD,betaIMP] = diffusion_inference(observed_cells,td);
    alphabeta_cell{d,1} = alpha;
    alphabeta_cell{d,2} = beta;
    alphabeta_cell{d,3} = betaMSD;
    h = figure('units','centimeters','position',[0 0 16.8 21],'visible','off');
    if MF == 1% MF posterior
        alpha_grand = sum(alpha,1);
        beta_grand = sum(beta,1);
        betaMSD_grand = sum(betaMSD,1);
        betaIMP_grand = sum(betaIMP,1);
        r = linspace((min(sig))^(-2)*0.5,(max(sig))^(-2)*5,1001);
        for c = 1:length(td)
            a  = alpha_grand(c);
            b  = 1/beta_grand(c);
            bM = 1/betaMSD_grand(c);
            bI = 1/betaIMP_grand(c);

            p = flip(1./r);
            y = gampdf(p,a,1/(a^2*b));
            z = gampdf(p,a,1/(a^2*bM));
            w = gampdf(p,a,1/(a^2*bI));
            M = [max(y) max(z) max(w)];
            subplot(ceil(length(td)/2) + 1,2,c)
            plot(p,y,'r','LineWidth',1.5)
            hold on
            plot(p,z,'b','LineWidth',1.5)
            %plot(p,w,'g')
            plot([1 1]*(min(sig))^(2),[-0.1 1.4]*max(M),'k--','LineWidth',1.5)
            plot([1 1]*(max(sig))^(2),[-0.1 1.4]*max(M),'k--','LineWidth',1.5)
            plot(([p(1) p(end)]),[0 0],'k','LineWidth',1.0)
            axis([p(1) p(end) [-0.1 1.4]*max(M)])
            xlabel('$\sigma^{2}$','Interpreter','latex');
            ylabel('$\pi(\sigma^2|X)$','Interpreter','latex')
            yticks([])
            title(['Minutes between observations: ' num2str(base_dt/60*td(c))])
        end
        W1 = zeros(size(td,2),1);
        W2 = zeros(size(td,2),1);
        W3 = zeros(size(td,2),1);
        min_track_length = 1;
        for c = 1:length(td)
            W1(c) = wasserstein_gamma(alpha_grand(c),beta_grand(c),sig,min_track_length);
            W2(c) = wasserstein_gamma(alpha_grand(c),betaMSD_grand(c),sig,min_track_length);
            W3(c) = wasserstein_gamma(alpha_grand(c),betaIMP_grand(c),sig,min_track_length);
        end
        subplot(ceil(length(td)/2) + 1,2,ceil(length(td))+1:ceil(length(td)) + 2)
        stem(W1,'r')
        hold on
        stem(W2,'b')
        %stem(W3,'g')
        grid on
        xticks(1:length(W1));
        xticklabels(string(base_dt/60*td));
        axis([0.5 length(W1)+0.5 [-0.1 1.1]*max(max(W1),max(W2))])
        %legend('Our method','MSD','Implicit','Location','northwest')
        xlabel('Minutes between observations')
        title('Wasserstein distance')
        sgtitle(['Posterior distributions for Experiment ' num2str(d)])
        figname = ['MFfigure' num2str(d)];
        saveas(h,strcat('Results\',figname),'png');

    else % Laplace-Wasserstein - but with delta:s lol
        W1 = zeros(size(td,2),1);
        W2 = zeros(size(td,2),1);
        W3 = zeros(size(td,2),1);
        min_track_length = 2;
        for c = 1:size(td,2)
            W1(c) = wasserstein_gamma(alpha(:,c),beta(:,c),sig,min_track_length);
            W2(c) = wasserstein_gamma(alpha(:,c),betaMSD(:,c),sig,min_track_length);
            W3(c) = wasserstein_gamma(alpha(:,c),betaIMP(:,c),sig,min_track_length);
        end
        for c = 1:length(td)

            log_modes = log(sqrt(beta./(alpha)));
            MSD_modes = log(sqrt(betaMSD./(alpha)));
            IMP_modes = log(sqrt(betaIMP./(alpha)));
            test = log_modes(:,c);
            test = test(~isnan(test));
            test1 = MSD_modes(:,c);
            test1 = test1(~isnan(test1));
            test2 = IMP_modes(:,c);
            test2 = test2(~isnan(test2));
            kern = @(x,r) normpdf(r,x,1/(length(log_modes))^(5/8));
            span = 5;
            r = linspace(log((min(sig))/span),log((max(sig))*span),1001);
            y = zeros(size(r));
            y1 = y;
            y2 = y;
            for i = 1:length(test)
                y  = y  + kern(test(i),r);
                y1 = y1 + kern(test1(i),r);
                y2 = y2 + kern(test2(i),r);
            end
            subplot(ceil(length(td)/2) + 1,2,c)

            h0 = histogram(test,'FaceColor',[0.75 0 0],'Normalization','probability','FaceAlpha',0.35);
            hold on
            h1 = histogram(test1,'FaceColor',[0 0 0.75],'Normalization','probability','FaceAlpha',0.35);
            %h2 = histogram(test2,'FaceColor',[0 0.75 0],'Normalization','probability','FaceAlpha',0.35);
            plot(r,max(h0.Values)*y/max(y),'r','LineWidth',1.5)
            plot(r,max(h1.Values)*y1/max(y1),'b','LineWidth',1.5)
            %plot(r,max(h2.Values)*y2/max(y2),'g','LineWidth',1.5)
            M = [max(h0.Values) max(h1.Values) max(h1.Values)];
            axis([r(1) r(end) -0.1*max(M) 1.4*max(M)])
            plot(log([min(sig) min(sig)]),[-0.1 1.4]*max(M),'k--','LineWidth',1.5)
            plot(log([max(sig) max(sig)]),[-0.1 1.4]*max(M),'k--','LineWidth',1.5)
            plot(([r(1) r(end)]),[0 0],'k','LineWidth',1.0)
            %legend('Our method','MSD','Location','northwest')
            title( ['\fontsize{10} Minutes between observations: ' num2str(base_dt/60*td(c))])
            grid on
            %xlh = xlabel('\fontsize{12} \sigma');
            %xlh.Position(2) = xlh.Position(2) + 0.1;
            xlabel('$\log(\hat{\sigma})$','interpreter','latex');
            ylabel('Distribution of modes')
            yticks([])
        end


        subplot(ceil(length(td)/2) + 1,2,(length(td))+1:(length(td))+2)
        xticklabels(string(base_dt/60*td));

        stem(W1,'r')
        hold on
        stem(W2,'b')
        %stem(W3,'g')
        grid on
        xticks(1:length(W1));
        xticklabels(string(base_dt/60*td));
        axis([0.5 length(W1)+0.5 [-0.1 1.1]*max(max(W1),max(W2))])
        %legend('Our method','MSD','Implicit','Location','northwest')
        xlabel('Minutes between observations')
        title('(G) Sum of mode deviations')
        sgtitle(['Distribution of posteriors modes for a system of ' num2str(length(test)) ' cells.'])
        figname = ['MODEfigure' num2str(d)];
        saveas(h,strcat('Results\',figname),'png');

    end
    h2 = figure('units','centimeters','position',[0 0 14 9],'visible','off');
    selected_cells = randi(length(alphabeta_cell{d,1}),1,4);
    selected_cells = sort(selected_cells);
    selected_cells = [8 22 68 206];
    for s = 1:4
        m = 1;
        i = selected_cells(s);
        legcel = cell(length(td),1);
        for c = 1:length(td)
            legcel{c} = [num2str(td(c)*base_dt/60) ' minutes'];
            al = alphabeta_cell{d,1};
            be = alphabeta_cell{d,2};
            r = linspace((min(sig))^(-2)*0.25,(max(sig))^(-2)*10,1001);
            p = flip(1./r);
            a = al(i,c);
            b = 1/be(i,c);
            y = gampdf(p,a,1/(a^2*b));
            M = [m max(y)];
            subplot(ceil(length(selected_cells)/2),2,s)
            h(c) = plot(p,y,'Color',[1 c/6 0],'LineWidth',1.1);
            hold on
            axis([min(p) max(p) 0 1.4*max(M)])
            m = max(M);
            title(['Posteriors for cell ' num2str(i) '.'])
        end
        plot([1 1]*(max(sig))^(2),[-0.1 1.4]*max(M),'k--','LineWidth',1.5)
        lgd = legend(h(1:c),legcel);
        lgd.FontSize = 5;
        xlabel('$\sigma^{2}$','interpreter','latex')
        ylabel('$p(\sigma^2|X)$','interpreter','latex')
        set(gca,'ytick',[])
        set(gca,'yticklabel',[])
        sgtitle(['Posteriors for four random cells in a population of ' num2str(length(alphabeta_cell{d,1})) '.'])
        grid on
    end
    postname = ['POSTfigure' num2str(d)];
    saveas(h2,strcat('Results\',postname),'png');
    h3 = figure('units','centimeters','position',[0 0 14 9],'visible','off');
    for s = 1:4
        m = 1;
        i = selected_cells(s);
        legcel = cell(length(td),1);
        for c = 1:length(td)
            legcel{c} = [num2str(td(c)*base_dt/60) ' minutes'];
            al = alphabeta_cell{d,1};
            be = alphabeta_cell{d,3};
            r = linspace((min(sig))^(-2)*0.25,(max(sig))^(-2)*10,1001);
            p = flip(1./r);
            a = al(i,c);
            b = 1/be(i,c);
            y = gampdf(p,a,1/(a^2*b));
            M = [m max(y)];
            subplot(ceil(length(selected_cells)/2),2,s)
            h(c) = plot(p,y,'Color',[0 c/6 1],'LineWidth',1.1);
            hold on
            axis([min(p) max(p) 0 1.4*max(M)])
            m = max(M);
            title(['Posteriors for cell ' num2str(i) '.'])
        end
        plot([1 1]*(max(sig))^(2),[-0.1 1.4]*max(M),'k--','LineWidth',1.5)
        lgd = legend(h(1:c),legcel);
        lgd.FontSize = 5.5;
        xlabel('$\sigma^{2}$','interpreter','latex')
        ylabel('$p(\sigma^2|X)$','interpreter','latex')
        set(gca,'ytick',[])
        set(gca,'yticklabel',[])
        sgtitle(['Posteriors for four random cells in a population of ' num2str(length(alphabeta_cell{d,1})) '.'])
        grid on
    end
    sostname = ['POSTMSDfigure' num2str(d)];
    saveas(h3,strcat('Results\',sostname),'png');    
    disp(['Dataset ' num2str(d) ' is done!'])
end


%% for table
clear figure
close all
wass_matrix = zeros(length(df),length(td));

for d = 1:length(df)
    al    = alphabeta_cell{d,1};
    be    = alphabeta_cell{d,2};
    bm    = alphabeta_cell{d,3};
    for c = 1:length(td)
        W1 = wasserstein_gamma(al(:,c),be(:,c),sig,min_track_length);
        W2 = wasserstein_gamma(al(:,c),bm(:,c),sig,min_track_length);
        wass_matrix(d,c) = W1-W2;
    end
end
[m1,i] = max(abs(wass_matrix));
[m2,j] = max(m1);
extreme = wass_matrix(i(j),j);
if extreme < 0
color_fun = @(x) [x/(2*extreme) + 1/2 0 -x/(2*extreme) + 1/2];
else
color_fun = @(x) [-x/(2*extreme) + 1/2 0 x/(2*extreme) + 1/2];
end

color_tensor = zeros(length(df),length(td),3);
for d = 1:length(df)
    for c = 1:length(td)
        color_tensor(d,c,:) = color_fun(wass_matrix(d,c))/norm(color_fun(wass_matrix(d,c)));
    end
end

x = linspace(-extreme,extreme);
custom_color_map = zeros(100,3);
for cc = 1:100
custom_color_map(cc,:) = color_fun(x(cc))/norm(color_fun(x(cc)));
end

colormap(custom_color_map);
image(color_tensor)
xticks(1:6)
yticks(1:4)
xticklabels({'5 min','10 min','20 min','30 min','45 min','60 min'})
yticklabels({'N=64','N=128','N=256','N=512'})
ytickangle(90)
set(gca,'xaxisLocation','top')

hold on
for i = 1:4 
    for j = 1:6
        plot(-0.5 + [1 7], 0.5 + [i i],'k')
        plot(-0.5 + [j j], 0.5 + [0 4],'k')
    end
end

axis equal
axis([0.5 6.5 0.5 4.5])

colorbar('Ticks',[0,1],...
         'TickLabels',{strcat('\Delta = ',num2str(-extreme)),strcat('\Delta = ',num2str(extreme))})